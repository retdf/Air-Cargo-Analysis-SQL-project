-- 2.	Write a query to create a route_details table using suitable data types for the fields, such as route_id, flight_num, origin_airport, destination_airport, aircraft_id, and distance_miles. Implement the check constraint for the flight number and unique constraint for the route_id fields. Also, make sure that the distance miles field is greater than 0. 
CREATE TABLE route_details (
 route_id INT PRIMARY KEY,
    flight_num INT,
    origin_airport VARCHAR(5),
    destination_airport VARCHAR(5),
    aircraft_id VARCHAR(10),
    distance_miles INT NOT NULL CHECK (distance_miles > 0)
);
-- 3.	Write a query to display all the passengers (customers) who have travelled in routes 01 to 25. Take data from the passengers_on_flights table.
SELECT 
    customer_id,route_id
FROM
    passengers_on_flights
WHERE
    route_id BETWEEN 1 AND 25;
-- 4.	Write a query to identify the number of passengers and total revenue in business class from the ticket_details see
SELECT 
    COUNT(customer_id) AS 'Number of passengers',
    SUM(Price_per_ticket) AS 'Total Revenue'
FROM
    ticket_details
WHERE
    class_id = 'Bussiness';
-- 5.	Write a query to display the full name of the customer by extracting the first name and last name from the customer table.
SELECT 
    first_name,
    last_name,
    CONCAT(first_name, ' ', last_name) AS 'Full_Name'
FROM
    customer;
-- 7.	Write a query to identify the customer’s first name and last name based on their customer ID and brand (Emirates) from the ticket_details table.

SELECT 
    first_name, last_name, brand
FROM
    customer
        INNER JOIN
    ticket_details
WHERE
    customer.customer_id = ticket_details.customer_id
        AND brand = 'Emirates';

-- 8.	Write a query to identify the customers who have travelled by Economy Plus class using Group By and Having clause on the passengers_on_flights table.--

SELECT 
    customer_id, class_id, COUNT(*) AS 'Number of Flights'
FROM
    passengers_on_flights
WHERE
    class_id = 'Economy Plus'
GROUP BY customer_id
HAVING COUNT(*) > 0;
-- 9.	Write a query to identify whether the revenue has crossed 10000 using the IF clause on the ticket_details table.
select (sum(no_of_tickets*Price_per_ticket)) as 'Total Revenue',
if (sum(no_of_tickets*price_per_ticket)>10000,'Revenue Cross 10000','Revenue does not cross 10000') as 'condition'
from ticket_details ;
-- 10.	Write a query to create and grant access to a new user to perform operations on a database.
CREATE USER 'Dhruv' IDENTIFIED BY '8055';
GRANT ALL PRIVILEGES ON air_cargo.* TO 'Dhruv';
-- 11.	Write a query to find the maximum ticket price for each class using window functions on the ticket_details table. 
select class_id,max(Price_per_ticket)over(partition by class_id) as 'Maximum Ticket Price' 
from ticket_details;
-- 12.	Write a query to extract the passengers whose route ID is 4 by improving the speed and performance of the passengers_on_flights table.
select * from passengers_on_flights
where route_id = 4;
-- 13.	 For the route ID 4, write a query to view the execution plan of the passengers_on_flights table.
create index idx_execution_plan on passengers_on_flights(route_id);
select route_id from passengers_on_flights
where route_id = 4;
-- 14.	Write a query to calculate the total price of all tickets booked by a customer across different aircraft IDs using rollup function.
SELECT 
    customer_id,
    aircraft_id,
 SUM(Price_per_ticket) AS total_price
FROM 
    ticket_details
    group by 1,2;
    


  


-- 15.	Write a query to create a view with only business class customers along with the brand of airlines. 
CREATE VIEW Business_Class_Customers AS
    SELECT 
        customer_id, brand, class_id
    FROM
        passengers_on_flights,
        (SELECT 
            brand
        FROM
            ticket_details
        WHERE
            class_id = 'Bussiness') AS brand
    WHERE
        class_id = 'Bussiness';
       select * from   Business_Class_Customers;
 
select * from  route_details;
-- 17.	Write a query to create a stored procedure that extracts all the details from the routes table where the travelled distance is more than 2000 miles.
DELIMITER //
CREATE PROCEDURE Distance_travelled()
BEGIN
    SELECT 
	route_id,
	distance_miles
	FROM route_details where distance_miles >2000;
END //
DELIMITER ;
call distance_travelled();
-- 18.	Write a query to create a stored procedure that groups the distance travelled by each flight into three categories. The categories are, short distance travel (SDT) for >=0 AND <= 2000 miles, intermediate distance travel (IDT) for >2000 AND <=6500, and long-distance travel (LDT) for >6500.
delimiter //
create procedure Categorical_Distance_Travelled()
begin
select route_id,distance_miles,
case 
when distance_miles >=0 AND distance_miles <= 2000 then 'SDT'
when distance_miles  >2000 AND  distance_miles  <=6500 then 'IDT'
when distance_miles  > distance_miles > 6500 then 'LDT'
else 'Unknown'
end as Flight_category
from route_details;
end //
delimiter ;
call Categorical_Distance_Travelled();

--  19.	Write a query to extract ticket purchase date, customer ID, class ID and specify if the complimentary services are provided for the specific class using a stored function in stored procedure on the ticket_details table. 
-- Condition: 
-- ●	If the class is Business and Economy Plus, then complimentary services are given as Yes, else it is No
DELIMITER //

CREATE FUNCTION get_complimentary_services(class_id VARCHAR(30))
RETURNS VARCHAR(3)
deterministic
BEGIN
    DECLARE result VARCHAR(3);
    IF class_id = 'Bussiness' OR class_id = 'Economy Plus' THEN
        SET result = 'Yes';
    ELSE
        SET result = 'No';
    END IF;
    RETURN result;
END //
DELIMITER ;
call get_complimentary_services();

delimiter //
create procedure ticket_info()

begin
select p_date,customer_id,class_id,get_complimentary_services(Class_id) AS 'Condition'
from ticket_details;
end //
delimiter ;
call  ticket_info();

-- 20.	Write a query to extract the first record of the customer whose last name ends with Scott using a cursor from the customer table.
select customer_id,first_name,last_name 
from customer
where  last_name  like 'Scott%';